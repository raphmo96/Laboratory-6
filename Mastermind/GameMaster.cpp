#include "stdafx.h"
#include "GameMaster.h"

std::random_device start;
std::mt19937 random(start());

GameMaster::GameMaster(const int height, const int width)
{
	size[0] = height;
	size[1] = width > 8 ? 8 : width;
	colors = new char[size[1]];
	masterKey = new char[size[1]];
	userKey = new char[size[1]];
	for (int i = 0; i < size[1]; i++) {
		colors[i] = maxColors[i];
	}
	dice = new std::uniform_int_distribution<>(0, size[1] - 1);

}

void GameMaster::Instructions() {
	std::string instructions;
	std::string nbColor = std::to_string(size[1]);
	instructions = "Welcome to the Mastermind!\n\n";
	instructions += "To play the MasterMind, you will have to find the color randomly generated by the failsafe AI.\n";
	instructions += nbColor;
	instructions += " colors between ";
	instructions += PrintColor(colors);
	instructions += " will form the key that you need to find.\n";
	instructions += "Each turn you will give ";
	instructions += nbColor;
	instructions += " colors that you think might form the key and\nthe AI will reveal the number of matching colors that are in the key ";
	instructions += "as well as how many colors are correctly placed.\n";
	instructions += "It won't tell which one though, so think well\nso you can be the Mastermind!";
	std::cout << instructions << std::endl;
}

void GameMaster::CreateGrid(const int& height, const int& width) {
	grid = new std::string *[height];
	for (int i = 0; i < height; i++) {
		grid[i] = new std::string[width + 2];
		for (int j = 0; j < width + 2; j++) {
			grid[i][j] = std::string("   ");
		}
	}
}

void GameMaster::Play() {
	CreateGrid(size[0], size[1]);
	Instructions();
	CreateKey();
	bool win = false;
	do {
		DrawGrid();
		AskUserInput();
		UpdateGrid();
		win = CheckWin();
		rounds++;
	} while (!win && (rounds < size[0]));
	GameState(win);
}

void GameMaster::DrawGrid() {
	std::string lineA;
	for (int i = 0; i < size[1] + 1; i++) {
		lineA += "---+";
	}
	lineA += "---";
	for (int i = 0; i < size[0]; i++) {
		std::string lineB;
		for (int j = 0; j < (size[1]) + 2; j++) {
			lineB += grid[i][j];
			if (j < size[1]) lineB += "|";
		}
		std::cout << lineB << std::endl;
		std::cout << lineA << std::endl;
	}
}

void GameMaster::UpdateGrid() {
	for (int i = 0; i < size[1]; i++) {
		grid[rounds][i] = " " + std::string(1, (userKey[i])) + " ";
	}
}

char* GameMaster::AskUserInput() {
	std::string choice;
	std::cout << "Enter a series of " << size[1] << " letters representing colors " << PrintColor(colors) << ": ";
	std::getline(std::cin, choice);
	std::string::iterator end_pos = std::remove(choice.begin(), choice.end(), ' ');
	choice.erase(end_pos, choice.end());
	std::transform(choice.begin(), choice.end(), choice.begin(), ::toupper);
	//strcpy_s(key, size[1] + 1, choice.c_str());
	for (int i = 0; i < choice.length(); i++) {
		userKey[i] = choice[i];
	}
	return userKey;
}

void GameMaster::GameState(bool &win) {
	std::cout << std::endl;
	std::string end = win ? "You won!" : "You lost! The key was" + PrintColor(masterKey);
	std::cout << end << std::endl << std::endl;
}

void GameMaster::CreateKey() {
	for (int i = 0; i < size[1]; i++) {
		masterKey[i] = colors[dice[0](random)];
	}
}

bool GameMaster::CheckWin() {
	int black = 0, white = 0;
	int keyLength = size[1];
	char* tempKey = new char[size[1]];
	for (int i = 0; i < keyLength; i++) {
		tempKey[i] = masterKey[i];
	}

	for (int i = size[1] - 1; i >= 0; --i) {
		if (userKey[i] == tempKey[i]) {
			black += 1;
			keyLength--;
			RemoveChar(userKey, i, keyLength);
			RemoveChar(tempKey, i, keyLength);
		}
	}
	if (black == size[1]) return true;
	grid[rounds][size[1]] = std::to_string(black) + " B ";
	for (int j = keyLength - 1; j >= 0; --j) {
		for (int k = keyLength - 1; k >= 1; --k) {
			if (tempKey[j] == userKey[k]) {
				white += 1;
				RemoveChar(tempKey, j, keyLength);
				RemoveChar(userKey, k, keyLength);
				break;
			}
		}
	}
	grid[rounds][size[1] + 1] = std::to_string(white) + " W";
	delete[] tempKey;
	return false;
}

char* GameMaster::RemoveChar(char* &list, int &index, int &length) {
	int counter = 0;
	for (int i = index; i < length; i++) {
		list[i] = list[i + 1];
	}
	return list;
}

std::string GameMaster::PrintColor(char* &colors) {
	std::string cString;
	for (int i = 0; i < size[1]; i++) {
		cString += dictionnary.find(colors[i])->second;
		cString += " ";
	}
	return cString;
}

GameMaster::~GameMaster() {
	for (int i = 0; i < size[0]; i++) {
		delete[] grid[i];
	}
	delete[] grid;
	delete[] masterKey;
	delete[] userKey;
	delete[] colors;
	delete dice;
}
