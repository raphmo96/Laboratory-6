#include "stdafx.h"
#include "GameMaster.h"


GameMaster::GameMaster(const int height, const int width)
{
	size[0] = height;
	size[1] = width > 8 ? 8 : width;
	masterKey = colors = new char[size[1]];
	for (int i = 0; i < size[1]; i++) {
		colors[i] = maxColors[i];
	}
}

void GameMaster::Instructions() {
	std::string instructions;
	std::string nbColor = std::to_string(size[1]);
	instructions = "Welcome to the Mastermind!\n\n";
	instructions += "To play the MasterMind, you will have to find the color randomly generated by the failsafe AI.\n";
	instructions += nbColor;
	instructions += " colors between ";
	instructions += PrintColor(colors);
	instructions += " will form the key that you need to find.\n";
	instructions += "Each turn you will give ";
	instructions += nbColor;
	instructions += " colors that you think might form the key and\nthe AI will reveal the number of matching colors that are in the key ";
	instructions += "as well as how many colors are correctly placed.\n";
	instructions += "It won't tell which one though, so think well\nso you can be the Mastermind!";
	std::cout << instructions << std::endl;
}

void GameMaster::CreateGrid(const int& height, const int& width) {
	grid = new std::string *[height];
	for (int i = 0; i < height; i++) {
		grid[i] = new std::string[width + 2];
		for (int j = 0; j < width + 2; j++) {
			grid[i][j] = std::string("   ");
		}
	}
}

void GameMaster::Play() {
	CreateGrid(size[0], size[1]);
	Instructions();
	bool win = false;
	do {
		DrawGrid();
		UpdateGrid(AskUserInput());
		rounds++;
	} while (rounds < size[0] || !win);

}

void GameMaster::DrawGrid() {
	std::string lineA;
	for (int i = 0; i < size[1] + 1; i++) {
		lineA += "---+";
	}
	lineA += "---";
	for (int i = 0; i < size[0]; i++) {
		std::string lineB;
		for (int j = 0; j < (size[1]) + 2; j++) {
			lineB += grid[i][j];
			if (j < size[1]) lineB += "|";
		}
		std::cout << lineB << std::endl;
		std::cout << lineA << std::endl;
	}
}

void GameMaster::UpdateGrid(char* userKey) {
	for (int i = 0; i < size[1]; i++) {
		grid[rounds][i] = " " + std::string(1, (userKey[i])) + " ";
	}
}

char* GameMaster::AskUserInput() {
	char* key = new char[size[1]];
	std::string choice;
	std::cout << "Enter a series of " << size[1] << " letters representing colors\n" << PrintColor(colors) << ": ";
	std::cin >> choice;
	strcpy_s(key, size[1], choice.c_str());
	return key;
}

std::string GameMaster::PrintColor(char* colors) {
	std::string cString;
	for (int i = 0; i < size[1]; i++) {
		cString += dictionnary.find(colors[i])->second;
		cString += " ";
	}
	return cString;
}

GameMaster::~GameMaster() {
	for (int i = 0; i < size[0]; i++) {
		delete[] grid[i];
	}
	delete[] grid;
}
